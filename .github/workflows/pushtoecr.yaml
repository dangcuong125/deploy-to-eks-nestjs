name: deploy auto marketing to EKS
on:
  push:
    branches: ['main']

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  deploy-dev:
    if: github.ref_name == 'main'
    name: deploy dev to cluster
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-southeast-1
      ECR_REPOSITORY: project-1
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      EKS_NAME_SPACE: keo-con-voi
      DEPLOYMENT_NAME: keo-con-voi
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker cache layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx

      - name: Build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          #   cache-from: |
          #     type=local,src=/tmp/.buildx-cache
          #   cache-to: |
          #     type=local,dest=/tmp/.buildx-cache-new
          build-args: |
            "SSH_PRIVATE_KEY=${{secrets.SSH_PRIVATE_KEY}}"

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: deploy app to cluster
        uses: kodermax/kubectl-aws-eks@597373ec549d9d0f173fdc9dc78bf9409b6d6821
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_DEV }}
          RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha  }}
        with:
          args: set image deployment/$DEPLOYMENT_NAME $DEPLOYMENT_NAME=${{ env.RELEASE_IMAGE }} -n $EKS_NAME_SPACE
